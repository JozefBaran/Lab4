@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control" @oninput="Input" placeholder="Filtruj po nazwie..." />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Where(f => string.IsNullOrEmpty(filterText) || f.Summary.Contains(filterText)))
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <p>Suma ciepłych dni: @warmDays</p>

    <!-- Przycisk do filtrowania dni poniżej 15°C -->
    <button class="btn btn-primary" @onclick="WarmDaysFilter">Filtruj dni poniżej 15°C</button>

    <!-- Przycisk do przywrócenia pierwotnego stanu tabeli -->
    <button class="btn btn-secondary" @onclick="RestoreForecast">Przywróć</button>
}

@code {
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? originalForecasts; // kopia tablicy przed filtrowaniem
    private int warmDays;
    private string filterText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        // pierwotne dane przed filtrowaniem
        originalForecasts = forecasts.ToArray();

        // liczy cieple dni powyzej 15 C
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void Input(ChangeEventArgs arg)
    {
        filterText = arg.Value?.ToString() ?? string.Empty;
    }

    private void WarmDaysFilter()
    {   
        // Filtruje tablicę do temperatur powyżej 15 C
        forecasts = forecasts.Where(f => f.TemperatureC > 15).ToArray();
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void RestoreForecast()
    {
        // Przywraca tablicę do pierwotnego stanu
        forecasts = originalForecasts.ToArray();
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

}
